from PyQt6.QtWidgets import (
    QWidget, QVBoxLayout, QLabel, QLineEdit,
    QPushButton, QListWidget, QListWidgetItem, QHBoxLayout, QMessageBox,
    QInputDialog
)
from PyQt6.QtCore import Qt
from src.gestores.gestor_categoria import GestorCategoria
from src.gestores.gestor_tareas import GestorTareas

class VentanaGestionCategoria(QWidget):
    """
    Ventana para la gesti√≥n de categor√≠as de tareas.

    Permite al usuario agregar, editar y eliminar categor√≠as.
    Tambi√©n valida si una categor√≠a tiene tareas asociadas antes de permitir su eliminaci√≥n.
    """
    def __init__(self, usuario, volver_a_main):
        """
        Inicializa la VentanaGestionCategoria.

        Args:
            usuario: Objeto de usuario actualmente logueado.
            volver_a_main: Funci√≥n de callback para regresar a la ventana principal.
        """
        super().__init__()
        self.usuario = usuario
        self.volver_a_main = volver_a_main
        self.gestor = GestorCategoria()
        self.gestor_tareas = GestorTareas()

        self.setWindowTitle("üè∑Ô∏è Gesti√≥n de Categor√≠as")
        self.setMinimumSize(400, 500)

        self.init_ui()
        self.mostrar_categorias()

    def init_ui(self):
        """
        Inicializa la interfaz de usuario de la ventana de gesti√≥n de categor√≠as.

        Configura el dise√±o, los widgets (inputs, botones, lista) y los estilos.
        """
        layout = QVBoxLayout()

        titulo = QLabel("üè∑Ô∏è Categor√≠as")
        titulo.setAlignment(Qt.AlignmentFlag.AlignCenter)
        titulo.setStyleSheet("font-size: 20px; font-weight: bold;")
        layout.addWidget(titulo)

        self.input_categoria = QLineEdit()
        self.input_categoria.setPlaceholderText("Nombre de nueva categor√≠a")
        layout.addWidget(self.input_categoria)

        btn_agregar = QPushButton("‚ûï Agregar Categor√≠a")
        btn_agregar.clicked.connect(self.agregar_categoria)
        layout.addWidget(btn_agregar)

        self.lista_categorias = QListWidget()
        layout.addWidget(self.lista_categorias)

        # Botones Editar y Eliminar
        botones_edicion = QHBoxLayout()
        self.btn_editar = QPushButton("‚úèÔ∏è Editar")
        self.btn_eliminar = QPushButton("üóëÔ∏è Eliminar")

        self.btn_editar.clicked.connect(self.editar_categoria)
        self.btn_eliminar.clicked.connect(self.eliminar_categoria)

        botones_edicion.addWidget(self.btn_editar)
        botones_edicion.addWidget(self.btn_eliminar)
        layout.addLayout(botones_edicion)

        # Volver
        btn_volver = QPushButton("‚¨Ö Volver")
        btn_volver.clicked.connect(self.volver)
        layout.addWidget(btn_volver)
        self.setStyleSheet("""
            QWidget {
                background-color: #f0f4f8;
                font-family: 'Segoe UI', sans-serif;
            }
            
            QLabel {
                font-size: 18px;
                color: black;
            }
            QLineEdit {
                padding: 6px;
                font-size: 14px;
                border: 1px solid #cbd5e0;
                border-radius: 5px;
                background-color: white;
                color:black;
            }
            QPushButton {
                background-color: #2563eb;
                color: white;
                font-size: 14px;
                font-weight: bold;
                padding: 8px 12px;
                border-radius: 6px;
                border: none;
            }
            QPushButton:hover {
                background-color: #1e40af;
            }
            QListWidget {
                background-color: white;
                border: 1px solid #cbd5e0;
                border-radius: 6px;
                font-size: 14px;
                padding: 4px;
                color: #1a202c; 
            }
        """)

        self.setLayout(layout)

    def mostrar_categorias(self):
        """
        Muestra todas las categor√≠as del usuario actual en la QListWidget.

        Limpia la lista actual y la repopula con las categor√≠as obtenidas del gestor.
        Cada elemento de la lista almacena el ID de la categor√≠a en su UserRole.
        """
        self.lista_categorias.clear()
        categorias = self.gestor.obtener_todas(self.usuario.id)
        for cat in categorias:
            item = QListWidgetItem(f"{cat.nombre}")
            item.setData(Qt.ItemDataRole.UserRole, cat.id)
            self.lista_categorias.addItem(item)

    def agregar_categoria(self):
        """
        Agrega una nueva categor√≠a.

        Obtiene el nombre de la categor√≠a del QLineEdit, lo valida y lo a√±ade
        a trav√©s del gestor de categor√≠as. Luego, actualiza la lista de categor√≠as.
        Muestra un mensaje de advertencia si el nombre est√° vac√≠o.
        """
        nombre = self.input_categoria.text().strip()
        if nombre:
            self.gestor.agregar_categoria(nombre, self.usuario.id)
            self.input_categoria.clear()
            self.mostrar_categorias()
        else:
            QMessageBox.warning(self, "Error", "El nombre de la categor√≠a no puede estar vac√≠o.")

    def eliminar_categoria(self):
        """
        Elimina la categor√≠a seleccionada.

        Verifica si hay una categor√≠a seleccionada. Antes de eliminar, comprueba
        si la categor√≠a tiene tareas asociadas. Si las tiene, muestra una advertencia.
        Si no, pide confirmaci√≥n al usuario antes de proceder con la eliminaci√≥n
        a trav√©s del gestor de categor√≠as y actualiza la lista.
        Muestra un mensaje de advertencia si no hay categor√≠a seleccionada.
        """
        item = self.lista_categorias.currentItem()
        if item:
            id_categoria = item.data(Qt.ItemDataRole.UserRole)

            # Validar si hay tareas asociadas
            tareas_asociadas = self.gestor_tareas.obtener_tareas_categoria(self.usuario.id, id_categoria)
            if tareas_asociadas:
                QMessageBox.warning(
                    self,
                    "‚ö†Ô∏è No se puede eliminar",
                    "Esta categor√≠a tiene tareas asociadas. Elim√≠nalas o cambia su categor√≠a antes."
                )
                return

            confirmacion = QMessageBox.question(
                self,
                "¬øEliminar categor√≠a?",
                "¬øEst√°s seguro de eliminar esta categor√≠a?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            )
            if confirmacion == QMessageBox.StandardButton.Yes:
                self.gestor.eliminar_categoria(id_categoria)
                self.mostrar_categorias()
        else:
            QMessageBox.warning(self, "Selecciona una categor√≠a", "Por favor, selecciona una categor√≠a para eliminar.")

    def editar_categoria(self):
        """
        Edita el nombre de la categor√≠a seleccionada.

        Verifica si hay una categor√≠a seleccionada. Solicita al usuario un nuevo nombre
        mediante un QInputDialog. Si se proporciona un nuevo nombre v√°lido, actualiza
        la categor√≠a a trav√©s del gestor y refresca la lista.
        Muestra un mensaje de advertencia si no hay categor√≠a seleccionada.
        """
        item = self.lista_categorias.currentItem()
        if item:
            id_categoria = item.data(Qt.ItemDataRole.UserRole)
            nuevo_nombre, ok = QInputDialog.getText(self, "Editar Categor√≠a", "Nuevo nombre:", text=item.text())
            if ok and nuevo_nombre.strip():
                self.gestor.actualizar_categoria(id_categoria, nuevo_nombre.strip())
                self.mostrar_categorias()
        else:
            QMessageBox.warning(self, "Selecciona una categor√≠a", "Selecciona una categor√≠a para editar.")

    def volver(self):
        """
        Cierra la ventana actual y llama a la funci√≥n de callback para volver a la ventana principal.
        """
        self.close()
        self.volver_a_main()