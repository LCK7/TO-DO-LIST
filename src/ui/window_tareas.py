from PyQt6.QtWidgets import QWidget, QVBoxLayout, QLabel, QPushButton, QListWidget, QListWidgetItem, QMessageBox, QInputDialog,QHBoxLayout,QMenu
from PyQt6.QtCore import Qt, QPoint,QSize
from PyQt6.QtGui import QCloseEvent,QIcon
from src.gestores.gestor_tareas import GestorTareas
from src.ui.dialogo_nueva_tarea import DialogoNuevaTarea



class VentanaTareas(QWidget):
    """
    Ventana principal para la gesti√≥n de tareas del usuario.

    Permite a los usuarios visualizar, agregar, editar, eliminar y cambiar el estado
    (completada/pendiente) de sus tareas. Ofrece un men√∫ contextual para acciones r√°pidas.
    """
    def __init__(self,usuario,volver_a_main):
        """
        Inicializa la VentanaTareas.

        Args:
            usuario: Objeto del usuario actual logueado.
            volver_a_main: Funci√≥n de callback para regresar a la ventana principal (men√∫).
        """
        super().__init__()
        self.usuario = usuario
        self.volver_a_main = volver_a_main
        self.setWindowTitle("Tus Tareas")
        self.setMinimumSize(400,500)
        
        self.gestor = GestorTareas()
        self.init_ui()
        self.cargar_tareas()
        
    def init_ui(self):
        """
        Configura la interfaz de usuario de la ventana de tareas.

        Establece el dise√±o, los widgets (t√≠tulo, lista de tareas, botones)
        y los estilos CSS. Configura el manejo de eventos para la lista de tareas.
        """
        layout = QVBoxLayout()
        layout.setSpacing(15)

        titulo = QLabel(f"Tareas de {self.usuario.nombre_usuario}")
        titulo.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(titulo)

        self.lista_tareas = QListWidget()
        # Habilita el men√∫ contextual personalizado
        self.lista_tareas.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
        self.lista_tareas.customContextMenuRequested.connect(self.mostrar_menu_contextual)
        self.lista_tareas.itemDoubleClicked.connect(self.editar_tarea)
        layout.addWidget(self.lista_tareas)

        # Bot√≥n Agregar
        self.boton_agregar = QPushButton("‚ûï Agregar tarea")
        self.boton_agregar.clicked.connect(self.agregar_tarea)
        layout.addWidget(self.boton_agregar)

        # Bot√≥n Volver
        self.btn_volver = QPushButton("‚¨ÖÔ∏è Volver al Inicio")
        self.btn_volver.setObjectName("btn_volver")
        self.btn_volver.clicked.connect(self.volver)
        layout.addWidget(self.btn_volver)

        self.setLayout(layout)
        
        self.setStyleSheet("""
            QWidget {
                background-color: #f9fafb;
                font-family: 'Segoe UI', Arial, sans-serif;
                color: #1a202c;
                font-size: 14px;
            }
            
            QLabel {
                font-size: 16px;
                margin-bottom: 10px;
                color: #2d3748;
                font-weight: bold;
            }

            QListWidget {
                background-color: #ffffff;
                border: 1px solid #cbd5e0;
                border-radius: 10px;
                padding: 10px;
            }

            QPushButton {
                background-color: #3182ce;
                color: white;
                border-radius: 10px;
                padding: 10px 15px;
                font-size: 14px;
                margin-top: 10px;
            }

            QPushButton:hover {
                background-color: #2b6cb0;
                font-weight: bold;
            }

            QPushButton#btn_volver {
                background-color: #4a5568;
            }

            QPushButton#btn_volver:hover {
                background-color: #2d3748;
            }
        """)
    
    def cargar_tareas(self):
        """
        Carga todas las tareas del usuario actual y las muestra en la QListWidget.

        Limpia la lista existente y agrega cada tarea como un QListWidgetItem personalizado.
        """
        self.lista_tareas.clear()
        self.tareas = self.gestor.obtener_todas(self.usuario.id)
        for tarea in self.tareas:
            self.agregar_item_tarea(tarea)
        
    def agregar_item_tarea(self, tarea):
        """
        Crea y a√±ade un widget personalizado para representar una tarea en la QListWidget.

        Cada tarea se muestra con su descripci√≥n, categor√≠a, fecha l√≠mite y estado,
        e incluye un bot√≥n para eliminar.

        Args:
            tarea: Objeto de la tarea a a√±adir (instancia de Tarea).
        """
        widget_tarea = QWidget()
        widget_tarea.setStyleSheet("""
            background-color: #ffffff;
            border-radius: 12px;
        """)
        layout_h = QHBoxLayout()
        layout_h.setContentsMargins(5, 5, 5, 5)
        layout_h.setSpacing(20)

        layout_v = QVBoxLayout()
        layout_v.setSpacing(5)

        label_desc = QLabel(f"üìù {tarea.descripcion}")
        label_desc.setStyleSheet("font-size: 15px; font-weight: bold; color: #1a202c;margin: 3px")
        
        label_cat = QLabel(f"üóÇÔ∏è Categoria: {tarea.categoria}")
        label_cat.setStyleSheet("font-size: 15px; font-weight: bold; color: #1a202c;margin: 3px")

        label_fecha = QLabel(f"üìÖ L√≠mite: {tarea.fecha_limite if tarea.fecha_limite else 'Sin l√≠mite'}")
        label_fecha.setStyleSheet("font-size: 13px; color: #4a5568;margin: 3px;")

        label_estado = QLabel("‚úÖ Completada" if tarea.estado else "‚ùå Pendiente")
        label_estado.setStyleSheet(f"font-size: 13px; color: {'#38a169' if tarea.estado else '#e53e3e'};margin: 3px;")

        layout_v.addWidget(label_desc)
        layout_v.addWidget(label_cat)
        layout_v.addWidget(label_fecha)
        layout_v.addWidget(label_estado)

        boton_eliminar = QPushButton()
        boton_eliminar.setIcon(QIcon("src/assets/slash.svg"))
        boton_eliminar.setIconSize(QSize(25,25))
        boton_eliminar.setFixedSize(40,45)
        boton_eliminar.setStyleSheet("""
            QPushButton {
                background-color: transparent;
            }
            QPushButton:hover {
                background-color: #f0f0f0;
            }
        """)
        # Conecta el bot√≥n de eliminar a la funci√≥n con el ID de la tarea
        boton_eliminar.clicked.connect(lambda _, tid=tarea.id: self.eliminar_tarea_confirmada(tid))
        
        layout_h.addLayout(layout_v)
        layout_h.addStretch() # Empuja el bot√≥n de eliminar al final
        layout_h.addWidget(boton_eliminar)

        widget_tarea.setLayout(layout_h)

        item = QListWidgetItem()
        item.setSizeHint(widget_tarea.sizeHint()) # Asegura que el item tenga el tama√±o correcto
        self.lista_tareas.addItem(item)
        self.lista_tareas.setItemWidget(item, widget_tarea)
        
    def agregar_tarea(self):
        """
        Abre un di√°logo para que el usuario cree una nueva tarea.

        Si el usuario confirma la creaci√≥n, valida la descripci√≥n,
        crea la categor√≠a si es necesario y agrega la tarea a trav√©s del gestor.
        Luego, recarga la lista de tareas. Muestra advertencias si la descripci√≥n est√° vac√≠a.
        """
        dialogo = DialogoNuevaTarea(self.usuario.id)
        if dialogo.exec(): # Muestra el di√°logo de forma modal
            descripcion, fecha_limite, nombre_categoria = dialogo.get_data()

            # Ajusta la fecha l√≠mite a None si est√° vac√≠a
            if fecha_limite == '':
                fecha_limite = None

            if descripcion.strip():
                # Crea la categor√≠a si no existe y obtiene su ID
                categoria_id = self.gestor.crear_categoria_si_no_existe(nombre_categoria,self.usuario.id)

                self.gestor.agregar_tarea(descripcion, self.usuario.id, fecha_limite, categoria_id)
                self.cargar_tareas() # Recarga las tareas para mostrar la nueva
            else:
                QMessageBox.warning(self, "Ups", "La descripci√≥n no puede estar vac√≠a.")


    def eliminar_tarea_confirmada(self, id_tarea):
        """
        Pide confirmaci√≥n al usuario antes de eliminar una tarea.

        Si el usuario confirma, elimina la tarea a trav√©s del gestor y recarga la lista.

        Args:
            id_tarea: El ID de la tarea a eliminar.
        """
        confirm = QMessageBox.question(self, "Eliminar Tarea", "¬øSeguro que deseas eliminar esta tarea?",
                                       QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
        if confirm == QMessageBox.StandardButton.Yes:
            self.gestor.eliminar_tarea(id_tarea)
            self.cargar_tareas() # Recarga las tareas despu√©s de la eliminaci√≥n
    
    def editar_tarea(self, item):
        """
        Abre un di√°logo para editar la tarea seleccionada (al hacer doble clic).

        Obtiene los datos de la tarea seleccionada, abre el di√°logo de edici√≥n
        con esos datos y, si se guardan los cambios, actualiza la tarea
        a trav√©s del gestor y recarga la lista.

        Args:
            item: El QListWidgetItem que fue doble-clicado, del cual se extrae la tarea.
        """
        # Encuentra la tarea correspondiente al item seleccionado
        index = self.lista_tareas.row(item)
        tarea = self.tareas[index]

        # Importa aqu√≠ para evitar import circular si lo tienes, o al principio del archivo
        from src.ui.dialogo_editar_tarea import DialogoEditarTarea

        # Abre el di√°logo de edici√≥n con la tarea actual
        dialogo = DialogoEditarTarea(tarea, self.usuario.id)

        if dialogo.exec(): # Muestra el di√°logo de forma modal
            nueva_desc, nueva_fecha, categoria_info = dialogo.get_data()

            # Determina el ID de la categor√≠a: si es un string (nueva categor√≠a), la crea.
            # Si ya es un int (ID de categor√≠a existente), lo usa directamente.
            if isinstance(categoria_info, str):
                categoria_id = self.gestor.crear_categoria_si_no_existe(categoria_info, self.usuario.id)
            else:
                categoria_id = categoria_info  # Puede ser None o un ID existente

            self.gestor.editar_tarea(tarea.id, nueva_desc, nueva_fecha, categoria_id)
            self.cargar_tareas() # Recarga las tareas para mostrar los cambios


    def mostrar_menu_contextual(self, pos: QPoint):
        """
        Muestra un men√∫ contextual al hacer clic derecho sobre un elemento de la lista de tareas.

        El men√∫ ofrece opciones para eliminar la tarea o cambiar su estado (completada/pendiente).

        Args:
            pos: La posici√≥n del clic del rat√≥n dentro del QListWidget.
        """
        item = self.lista_tareas.itemAt(pos)
        if not item: # Si no se hizo clic en un item, no mostrar men√∫
            return

        # Obtiene la tarea asociada al item clicado
        index = self.lista_tareas.row(item)
        tarea = self.tareas[index]

        menu = QMenu(self)

        # Acciones del men√∫
        accion_eliminar = menu.addAction("üóëÔ∏è Eliminar tarea")
        accion_estado = menu.addAction("‚úÖ Marcar como Completada" if not tarea.estado else "‚ùå Marcar como Pendiente")

        # Muestra el men√∫ en la posici√≥n global del cursor y espera la selecci√≥n del usuario
        accion = menu.exec(self.lista_tareas.mapToGlobal(pos))

        # Ejecuta la acci√≥n seleccionada
        if accion == accion_eliminar:
            self.eliminar_tarea_confirmada(tarea.id)
        elif accion == accion_estado:
            self.gestor.cambiar_estado(tarea.id, not tarea.estado) # Invierte el estado actual
            self.cargar_tareas() # Recarga para reflejar el cambio de estado
            
    def volver(self):
        """
        Oculta la ventana actual de tareas y llama a la funci√≥n de callback
        para volver a la ventana principal de la aplicaci√≥n.
        """
        self.hide()
        self.volver_a_main()
        
    def closeEvent(self, event:QCloseEvent): # type: ignore
        """
        Maneja el evento de cierre de la ventana de tareas.

        Pregunta al usuario si desea regresar al men√∫ principal antes de cerrar la ventana.
        Si la respuesta es 'S√≠', oculta la ventana y llama a la funci√≥n de callback.
        Si es 'No', permite que la ventana se cierre.

        Args:
            event: El evento de cierre (QCloseEvent).
        """
        respuesta = QMessageBox.question(
            self,
            "Salir de Tareas",
            "¬øDeseas regresar al men√∫ principal?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )

        if respuesta == QMessageBox.StandardButton.Yes:
            event.ignore() # Ignora el cierre inmediato
            self.hide() # Oculta la ventana
            self.volver_a_main() # Llama al callback para volver al men√∫
        else:
            event.accept() # Permite que la ventana se cierre (finalizando la aplicaci√≥n si es la √∫ltima)